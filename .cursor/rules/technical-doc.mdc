---
alwaysApply: true
---
## Systems

### Save/Load

* Autosave after **node resolve**.
* Stored in `localStorage` as JSON.
* Save schema is versioned (`v1`, `v2`, etc.).
* Title shows **Load** if save exists, else **New Game**.

### Node Data Model (simplified)

```ts
type Node = {
  id: string
  title: string
  requires: string[] // prerequisite node ids
  sceneId: string    // dialog scene content id
}

type Save = {
  version: number
  completed: string[] // node ids
  stats: Record<string, number>
  items: string[]
  achievements: string[]
}

function nodeState(node: Node, save: Save, debugIgnoreLocks = false) {
  if (save.completed.includes(node.id)) return "completed"
  if (debugIgnoreLocks) return "unlocked"
  return node.requires.every(id => save.completed.includes(id))
    ? "unlocked"
    : "locked"
}
```

### Scene Model

```ts
type Scene = {
  id: string
  title: string
  steps: Step[]
  onResolve?: Effect[]
}

type Step = {
  id: string
  prose: string | { md: string }
  groups: OptionGroup[]
  next?: string // id of next step
}

type OptionGroup = {
  id: string
  prompt: string
  options: Option[]
}

type Option = {
  id: string
  label: string
  effects?: Effect[]
}

type Effect =
  | { statDelta: { stat: string; delta: number } }
  | { grantItem: string }
  | { grantAchievement: string }
  | { setFlag: string }
```

### Inventory

```ts
type Item = {
  id: string
  icon: string // emoji or asset key
  name: string
  blurb: string // 1–3 sentences
}
```

### Achievements

```ts
type Achievement = {
  id: string
  icon: string
  name: string
  description: string
  hidden?: boolean
}
```

---

## Example Scenes

### Example 1 — Ultrasound & Progesterone

```ts
const scene_ultrasound: Scene = {
  id: "ultra-prog",
  title: "First Ultrasound",
  steps: [
    {
      id: "s1",
      prose: "You’re at the ultrasound. The doctor asks about progesterone levels.",
      groups: [
        {
          id: "prog-level",
          prompt: "What do you say?",
          options: [
            { id: "low", label: "She's at 0.25" },
            { id: "mid", label: "She's at 2 to 2.5" },
            { id: "high", label: "She's above 4", effects: [ { statDelta: { stat: "knowledge", delta: +1 } } ] },
          ],
        },
      ],
      next: "s2",
    },
    {
      id: "s2",
      prose: "The tech nods and continues. You squeeze your partner’s hand.",
      groups: [],
    },
  ],
  onResolve: [ { grantItem: "ultrasound-photo" } ],
}
```

### Example 2 — Managing Pain

```ts
const scene_pain: Scene = {
  id: "pain-event",
  title: "A Spike of Pain",
  steps: [
    {
      id: "s1",
      prose: "Your partner doubles over with intense pain.",
      groups: [
        {
          id: "tone",
          prompt: "How do you respond?",
          options: [
            { id: "reassure", label: "You tell her it'll be okay", effects: [ { statDelta: { stat: "support", delta: +1 } } ] },
            { id: "quiet", label: "You are quiet" },
            { id: "normalize", label: "You remind her this is normal" },
          ],
        },
      ],
      next: "s2",
    },
    {
      id: "s2",
      prose: "She breathes through it. Depending on what you did, she seems calmer.",
      groups: [],
    },
  ],
  onResolve: [ { grantAchievement: "pain-managed" } ],
}
```
